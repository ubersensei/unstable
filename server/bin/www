#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('slingshotexpressmysql:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Attach socket.io to the server
 */

const io = require('socket.io')(server);
const serverName = process.env.NAME || 'Unknown';

var redis = require('redis');
var redisAdapter = require('socket.io-redis');
const redisClient = redis.createClient({
  host: 'redis',
  port: 6379,
  retry_strategy: () => 1000
});
const sub = redisClient.duplicate();
const pub = redisClient.duplicate();

io.adapter(redisAdapter({
    key: 'adapterKey',
    pubClient: pub,
    subClient: sub,
  }));

io.on('connection', function(socket) {    
    socket.emit('fromServer', {
        title: 'myId',
        content: `[${serverName}]/[${port}]/[${socket.id}]`
    });
    socket.on('fromClient', function(data) {
        // we receive message from the client and
        // then broadcast to everyone
        // console.log(data);
        io.emit('fromServer', {
            title: 'from',
            content: `[${serverName}]/[${port}]/[${socket.id}] says ${data}`
        });
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind =
        typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
